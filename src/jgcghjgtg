// src/app/message-box/message-box.component.ts
import { Component, OnInit } from '@angular/core';
import { ChatService } from '../services/chat.service';

@Component({
  selector: 'app-message-box',
  templateUrl: './message-box.component.html',
  styleUrls: ['./message-box.component.css'],
})
export class MessageBoxComponent implements OnInit {
  messages: string[] = [];
  newMessage: string = '';

  constructor(private chatService: ChatService) {}

  ngOnInit(): void {
    this.chatService.getMessages().subscribe((messages) => {
      this.messages = messages;
    });
  }

  sendMessage() {
    if (this.newMessage.trim()) {
      this.chatService.sendMessage(this.newMessage);
      this.newMessage = ''; // Clear the input after sending
    }
  }
}

!-- <div *ngFor="let message of messageList">
  <li>
      {{message}}
  </li>
</div>

<input
  [(ngModel)]="newMessage" (keyup)="$event.keyCode == 13 && sendMessage()"/>
<button class="btn btn-primary (click)="sendMessage()">Send Message</button> -->


newMessage = '';
//   messageList: string[] = [];
// message: any;

//   constructor(private chatService: ChatService){

//   }

//   ngOnInit(){
//     this.chatService.getNewMessage().subscribe((message: string) => {
//       this.messageList.push(message);
//     })
//   }

//   sendMessage() {
//     this.chatService.sendMessage(this.newMessage);
//     this.newMessage = '';
//   }





getMessagesUsingReciverid(senderId: string | null, reciverId: string | null): Observable<any>{
  // console.log('reciverId', reciverId)
  const data={senderId,reciverId}
//  console.log("url route", `${this.Url}/showdata/${reciverId}`);
  return this.http.post(`${this.Url}/showdata`,data);
}
import { Component, HostListener, Input, OnInit } from '@angular/core';
import { DataService } from '../data.service';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { io } from 'socket.io-client';



@Component({
  selector: 'app-message-box',
  standalone: true,
  imports: [CommonModule,FormsModule],
  templateUrl: './message-box.component.html',
  styleUrl: './message-box.component.css'
})
export class MessageBoxComponent implements OnInit {
  messageList: any = [];
  message: any;
  newMessage: string = '';
  selectedUser: any; 
  currentUserId: any; 
  socket = io('http://localhost:3000');
  currentReceiverId: any;

  constructor(private dataService: DataService) {}

  ngOnInit(): void {
    this.currentUserId = localStorage.getItem('id')
    this.currentReceiverId = localStorage.getItem('reciverId')
    
    this.dataService.getselectedUsers().subscribe((user: any) => {
      if(user){
        console.log('userrr', user)
        this.selectedUser = user;
        console.log("Selected User in MessageBox: ", this.selectedUser);
        this.dataService.getMessagesUsingReciverid(this.selectedUser._id,this.currentUserId).subscribe(
          data => {
            if(data){
              this.messageList = data?.data
              console.log('this.messageListttt', this.messageList)
              console.log('Received data11111:', data);
            }
          });
      }
    });
    this.dataService.getNewMessage().subscribe((messages:string) => {
      if(messages){
        this.messageList.push(messages);
        console.log("==----------",messages)
      }
    });
  }
  // private scrollToBottom(): void {
  //   this.chatContainer.nativeElement.scrollTop = this.chatContainer.nativeElement.scrollHeight;
  // }

  // ngAfterViewChecked() {
  //   this.scrollToBottom(); 
  // }
  onKeyUp(event: KeyboardEvent) {
    if (event.keyCode === 13) { // Enter key
      this.sendMessage();
      // this.dataStore();
    }
  }

  sendMessage() {
  
      // this.dataService.sendMessage(this.newMessage);
      console.log('this.selectedUser', this.selectedUser)
      let datatToSend = {
        receieverId: this.selectedUser._id,
        senderId: localStorage.getItem('id'),
        message: this.newMessage
      }
      console.log('datatToSend----------', datatToSend)
      this.messageList.push(datatToSend)
      this.socket.emit('message', datatToSend);

      this.newMessage = ''; 
      // console.log('this.newMessage', this.newMessage)
      // console.log("==----------",this.newMessage)
    }
  dataStore(){
  // console.log(' data store func called-----------:', );
    const senderId=localStorage.getItem('id');
    const reciverId= localStorage.getItem('reciverId');
    this.dataService.sendreciverId(this.newMessage,senderId,reciverId)?.subscribe((res:any)=>{     
    }, (error:any)=>[
       console.log("eror",error)
    ]);
  }
}